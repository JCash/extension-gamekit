local output = require "main.OutputText"
local td = require "main.TableDumper"
local base64 = require "main.base64"
local isGameCenterEnabled
local isGameCenterSignInUiEnabled
local set_output_text_hash
local localPlayerID
local opponentPlayerID

local function display_image(img_width, img_height, img_buffer)
	local resource_path = go.get("#display", "texture0")
	local header = {width=img_width, height=img_height, type=resource.TEXTURE_TYPE_2D, format=resource.TEXTURE_FORMAT_RGBA, num_mip_maps=1}
	resource.set_texture(resource_path, header, img_buffer)
end

local function on_save_game(self, event)
	print(">game_center< on_save_game event.type = " .. event.type)
	td.dumpTable(event)
	-- saveGameData currenly not working
	-- continual error 27: not logged into iCloud even though all accounts are logged into iCloud and GameCenter
	if event.type == "error" then
		-- if your game receives the error below, tell user to signin to iCloud and turn on iCloud Drive to be able to save their game data
		-- event.errorCode = 27
		-- event.description = GKErrorUbiquityContainerUnavailable = 27 The requested operation could not be completed because you are 
		-- not signed in to iCloud or have not enabled iCloud Drive
		output.text = output.text .. "on_save_game event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_save_game event.errorCode = " .. tostring(event.errorCode) .. "\n"
		output.text = output.text .. "on_save_game event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
		-- temporary success callback event below for testing only until error 27 is resolved
	elseif event.type == "success" then
		output.text = output.text .. "on_save_game event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_save_game event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	end
end

local function on_realtime_match(self, event)
	print(">game_center< on_realtime_match event.type = " .. event.type)
	td.dumpTable(event)
	if event.type == "error" then
		output.text = output.text .. "on_realtime_match event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_realtime_match event.errorCode = " .. tostring(event.errorCode) .. "\n"
		output.text = output.text .. "on_realtime_match event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "success" then
		output.text = output.text .. "on_realtime_match event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_realtime_match event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "matchData" then
		output.text = output.text .. "on_realtime_match event.type = " .. event.type .. "\n"
		local dataString = base64.decode(event.data) -- decode base64 data from game center
		output.text = output.text .. "on_realtime_match event.data = " .. dataString .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerAlias = " .. event.playerAlias .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerDisplayName = " .. event.playerDisplayName .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerID = " .. event.playerID .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "playerStateDisconnected" then
		output.text = output.text .. "on_realtime_match event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerAlias = " .. event.playerAlias .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerDisplayName = " .. event.playerDisplayName .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerID = " .. event.playerID .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "playerStateUnknown" then
		output.text = output.text .. "on_realtime_match event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerAlias = " .. event.playerAlias .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerDisplayName = " .. event.playerDisplayName .. "\n"
		output.text = output.text .. "on_realtime_match from event.playerID = " .. event.playerID .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	end
end

local function on_realtime_matchmaker(self, event)
	print(">game_center< on_realtime_matchmaker event.type = " .. event.type)
	td.dumpTable(event)
	if event.type == "error" then
		output.text = output.text .. "on_realtime_matchmaker event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.errorCode = " .. tostring(event.errorCode) .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "success" then
		output.text = output.text .. "on_realtime_matchmaker event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "acceptedInvite" then
		output.text = output.text .. "on_realtime_matchmaker event.type = " .. event.type .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
		-- show game center real time match ui for invite
		gamekit.gc_realtime("showMatchWithInviteUI", {})
	elseif event.type == "matchStarted" then
		output.text = output.text .. "on_realtime_matchmaker event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.expectedPlayerCount = " .. tostring(event.expectedPlayerCount) .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.playersCount = " .. tostring(event.playersCount) .. "\n"
		for i = 1, event.playersCount do
			if event.players[i].playerID ~= localPlayerID then -- this conditional only works for a 2 player game
				opponentPlayerID = event.players[i].playerID
			end
			output.text = output.text .. "on_realtime_matchmaker event.players[" .. tostring(i) .. "].playerAlias = " .. event.players[i].playerAlias .. "\n"
			output.text = output.text .. "on_realtime_matchmaker event.players[" .. tostring(i) .. "].playerDisplayName = " .. event.players[i].playerDisplayName .. "\n"
			output.text = output.text .. "on_realtime_matchmaker event.players[" .. tostring(i) .. "].playerID = " .. event.players[i].playerID .. "\n"
		end
		msg.post("/menus#scroll_text", set_output_text_hash)
		-- expectedPlayerCount, the remaining number of players who have not yet connected to the match
		-- When its value reaches 0, all expected players are connected, and your game can begin the match.
		if event.expectedPlayerCount == 0 then
			gamekit.gc_realtime("registerMatchCallback", {callback=on_realtime_match}) -- register callback to send and recive matchData
		end
	elseif event.type == "playerAddedToMatch" then
		output.text = output.text .. "on_realtime_matchmaker event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.expectedPlayerCount = " .. tostring(event.expectedPlayerCount) .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.playersCount = " .. tostring(event.playersCount) .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.playerAlias = " .. event.playerAlias .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.playerDisplayName = " .. event.playerDisplayName .. "\n"
		output.text = output.text .. "on_realtime_matchmaker event.playerID = " .. event.playerID .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	end
end

local function on_achievements(self, event)
	print(">game_center< on_achievements event.type = " .. event.type)
	td.dumpTable(event)
	if event.type == "error" then
		output.text = output.text .. "on_achievements event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_achievements event.errorCode = " .. tostring(event.errorCode) .. "\n"
		output.text = output.text .. "on_achievements event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "success" then
		output.text = output.text .. "on_achievements event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_achievements event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "achievementImage" then
		display_image(event.image.width, event.image.height, event.image.buffer)
		output.text = output.text .. "on_achievements event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_achievements event.achievementID = " .. event.achievementID .. "\n"
		output.text = output.text .. "on_achievements event.image.width = " .. tostring(event.image.width) .. "\n"
		output.text = output.text .. "on_achievements event.image.height = " .. tostring(event.image.height) .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "achievementsList" then
		output.text = output.text .. "on_achievements event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_achievements event.achievementsCount = " .. tostring(event.achievementsCount) .. "\n"
		for i = 1, event.achievementsCount do
			output.text = output.text .. "on_achievements event.achievements[" .. tostring(i) .. "].playerAlias = " .. event.achievements[i].playerAlias .. "\n"
			output.text = output.text .. "on_achievements event.achievements[" .. tostring(i) .. "].playerDisplayName = " .. event.achievements[i].playerDisplayName .. "\n"
			output.text = output.text .. "on_achievements event.achievements[" .. tostring(i) .. "].playerID = " .. event.achievements[i].playerID .. "\n"
			output.text = output.text .. "on_achievements event.achievements[" .. tostring(i) .. "].achievementID = " .. event.achievements[i].achievementID .. "\n"
			output.text = output.text .. "on_achievements event.achievements[" .. tostring(i) .. "].isCompleted = " .. tostring(event.achievements[i].isCompleted) .. "\n"
			output.text = output.text .. "on_achievements event.achievements[" .. tostring(i) .. "].percentComplete = " .. tostring(event.achievements[i].percentComplete) .. "\n"
			output.text = output.text .. "on_achievements event.achievements[" .. tostring(i) .. "].showsCompletionBanner = " .. tostring(event.achievements[i].showsCompletionBanner) .. "\n"
			output.text = output.text .. "on_achievements event.achievements[" .. tostring(i) .. "].lastReportedDate = " .. event.achievements[i].lastReportedDate .. "\n"
		end
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "achievementsDescList" then
		output.text = output.text .. "on_achievements event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_achievements event.descriptionsCount = " .. tostring(event.descriptionsCount) .. "\n"
		for i = 1, event.descriptionsCount do
			output.text = output.text .. "on_achievements event.descriptions[" .. tostring(i) .. "].achievementTitle = " .. event.descriptions[i].achievementTitle .. "\n"
			output.text = output.text .. "on_achievements event.descriptions[" .. tostring(i) .. "].achievementID = " .. event.descriptions[i].achievementID .. "\n"
			output.text = output.text .. "on_achievements event.descriptions[" .. tostring(i) .. "].achievementGroupID = " .. tostring(event.descriptions[i].achievementGroupID) .. "\n"
			output.text = output.text .. "on_achievements event.descriptions[" .. tostring(i) .. "].unachievedDescription = " .. event.descriptions[i].unachievedDescription .. "\n"
			output.text = output.text .. "on_achievements event.descriptions[" .. tostring(i) .. "].achievedDescription = " .. event.descriptions[i].achievedDescription .. "\n"
			output.text = output.text .. "on_achievements event.descriptions[" .. tostring(i) .. "].maximumPoints = " .. tostring(event.descriptions[i].maximumPoints) .. "\n"
			output.text = output.text .. "on_achievements event.descriptions[" .. tostring(i) .. "].isHidden = " .. tostring(event.descriptions[i].isHidden) .. "\n"
			output.text = output.text .. "on_achievements event.descriptions[" .. tostring(i) .. "].isReplayable = " .. tostring(event.descriptions[i].isReplayable) .. "\n"
		end
		msg.post("/menus#scroll_text", set_output_text_hash)
	end
end

local function on_leaderboards(self, event)
	print(">game_center< on_leaderboards event.type = " .. event.type)
	td.dumpTable(event)
	if event.type == "error" then
		output.text = output.text .. "on_leaderboards event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_leaderboards event.errorCode = " .. tostring(event.errorCode) .. "\n"
		output.text = output.text .. "on_leaderboards event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "success" then
		output.text = output.text .. "on_leaderboards event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_leaderboards event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "leaderboardImage" then
		display_image(event.image.width, event.image.height, event.image.buffer)
		output.text = output.text .. "on_leaderboards event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_leaderboards event.leaderboardID = " .. event.leaderboardID .. "\n"
		output.text = output.text .. "on_leaderboards event.image.width = " .. tostring(event.image.width) .. "\n"
		output.text = output.text .. "on_leaderboards event.image.height = " .. tostring(event.image.height) .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "leaderboardSetImage" then
		display_image(event.image.width, event.image.height, event.image.buffer)
		output.text = output.text .. "on_leaderboards event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_leaderboards event.leaderboardSetID = " .. event.leaderboardSetID .. "\n"
		output.text = output.text .. "on_leaderboards event.image.width = " .. tostring(event.image.width) .. "\n"
		output.text = output.text .. "on_leaderboards event.image.height = " .. tostring(event.image.height) .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "leaderboardsList" then
		output.text = output.text .. "on_leaderboards event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_leaderboards event.leaderboardsCount = " .. tostring(event.leaderboardsCount) .. "\n"
		for i = 1, event.leaderboardsCount do
			output.text = output.text .. "on_leaderboards event.leaderboards[" .. tostring(i) .. "].leaderboardTitle = " .. event.leaderboards[i].leaderboardTitle .. "\n"
			output.text = output.text .. "on_leaderboards event.leaderboards[" .. tostring(i) .. "].leaderboardID = " .. event.leaderboards[i].leaderboardID .. "\n"
			output.text = output.text .. "on_leaderboards event.leaderboards[" .. tostring(i) .. "].leaderboardGroupID = " .. tostring(event.leaderboards[i].leaderboardGroupID) .. "\n"
		end
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "leaderboardSetsList" then
		output.text = output.text .. "on_leaderboards event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_leaderboards event.leaderboardSetsCount = " .. tostring(event.leaderboardSetsCount) .. "\n"
		for i = 1, event.leaderboardSetsCount do
			output.text = output.text .. "on_leaderboards event.leaderboardSets[" .. tostring(i) .. "].leaderboardSetTitle = " .. event.leaderboardSets[i].leaderboardSetTitle .. "\n"
			output.text = output.text .. "on_leaderboards event.leaderboardSets[" .. tostring(i) .. "].leaderboardSetID = " .. event.leaderboardSets[i].leaderboardSetID .. "\n"
			output.text = output.text .. "on_leaderboards event.leaderboardSets[" .. tostring(i) .. "].leaderboardSetGroupID = " .. tostring(event.leaderboardSets[i].leaderboardSetGroupID) .. "\n"
		end
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "defaultLeaderboardID" then
		output.text = output.text .. "on_leaderboards defaultLeaderboardID event.leaderboardID = " .. event.leaderboardID .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	end
end

local function on_scores(self, event)
	print(">game_center< on_scores event.type = " .. event.type)
	td.dumpTable(event)
	if event.type == "error" then
		output.text = output.text .. "on_scores event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_scores event.errorCode = " .. tostring(event.errorCode) .. "\n"
		output.text = output.text .. "on_scores event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "success" then
		output.text = output.text .. "on_scores event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_scores event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "scoresList" then
		output.text = output.text .. "on_scores event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_scores event.leaderboardTitle = " .. event.leaderboardTitle .. "\n"
		output.text = output.text .. "on_scores event.leaderboardGroupID = " .. tostring(event.leaderboardGroupID) .. "\n"
		output.text = output.text .. "on_scores event.leaderboardMaxRange = " .. tostring(event.leaderboardMaxRange) .. "\n"
		if event.localPlayerScore == nil then -- check if localPlayer has a score on requested leaderboard
			output.text = output.text .. "on_scores event.localPlayerScore = " .. tostring(event.localPlayerScore) .. "\n"			
		else
			output.text = output.text .. "on_scores event.localPlayerScore.playerAlias = " .. event.localPlayerScore.playerAlias .. "\n"
			output.text = output.text .. "on_scores event.localPlayerScore.playerDisplayName = " .. event.localPlayerScore.playerDisplayName .. "\n"
			output.text = output.text .. "on_scores event.localPlayerScore.playerID = " .. event.localPlayerScore.playerID .. "\n"
			output.text = output.text .. "on_scores event.localPlayerScore.leaderboardID = " .. event.localPlayerScore.leaderboardID .. "\n"
			output.text = output.text .. "on_scores event.localPlayerScore.rank = " .. tostring(event.localPlayerScore.rank) .. "\n"
			output.text = output.text .. "on_scores event.localPlayerScore.formattedValue = " .. event.localPlayerScore.formattedValue .. "\n"
			output.text = output.text .. "on_scores event.localPlayerScore.value = " .. tostring(event.localPlayerScore.value) .. "\n"
			output.text = output.text .. "on_scores event.localPlayerScore.context = " .. tostring(event.localPlayerScore.context) .. "\n"
			output.text = output.text .. "on_scores event.localPlayerScore.date = " .. event.localPlayerScore.date .. "\n"
		end
		output.text = output.text .. "on_scores event.scoresCount = " .. tostring(event.scoresCount) .. "\n"
		for i = 1, event.scoresCount do
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].playerAlias = " .. event.scores[i].playerAlias .. "\n"
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].playerDisplayName = " .. event.scores[i].playerDisplayName .. "\n"
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].playerID = " .. event.scores[i].playerID .. "\n"
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].leaderboardID = " .. event.scores[i].leaderboardID .. "\n"
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].rank = " .. tostring(event.scores[i].rank) .. "\n"
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].formattedValue = " .. event.scores[i].formattedValue .. "\n"
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].value = " .. tostring(event.scores[i].value) .. "\n"
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].context = " .. tostring(event.scores[i].context) .. "\n"
			output.text = output.text .. "on_scores event.scores[" .. tostring(i) .. "].date = " .. event.scores[i].date .. "\n"
		end
		msg.post("/menus#scroll_text", set_output_text_hash)
	end
end

local function on_gc_signin(self, event)
	print(">game_center< on_gc_signin event.type = " .. event.type)
	td.dumpTable(event)
	if event.type == "error" then
		isGameCenterEnabled = false
		isGameCenterSignInUiEnabled = false
		output.text = output.text .. "on_gc_signin event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_gc_signin event.errorCode = " .. tostring(event.errorCode) .. "\n"
		output.text = output.text .. "on_gc_signin event.description = " .. event.description .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "showSignInUI" then
		isGameCenterEnabled = false
		isGameCenterSignInUiEnabled = true
		output.text = output.text .. "on_gc_signin event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_gc_signin event.description = " .. event.description .. "\n"
		output.text = output.text .. "on_gc_signin isGameCenterSignInUiEnabled  = " .. tostring(isGameCenterSignInUiEnabled) .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	elseif event.type == "authenticated" then
		isGameCenterEnabled = true
		isGameCenterSignInUiEnabled = false
		localPlayerID = event.localPlayerID
		output.text = output.text .. "on_gc_signin event.type = " .. event.type .. "\n"
		output.text = output.text .. "on_gc_signin event.localPlayerID = " .. event.localPlayerID .. "\n"
		output.text = output.text .. "on_gc_signin event.localPlayerAlias = " .. event.localPlayerAlias .. "\n"
		output.text = output.text .. "on_gc_signin event.localPlayerIsUnderage = " .. tostring(event.localPlayerIsUnderage) .. "\n"
		output.text = output.text .. "on_gc_signin isGameCenterEnabled = " .. tostring(isGameCenterEnabled) .. "\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
		-- register matchmaker callback to get 'acceptedInvite' event
		gamekit.gc_realtime("registerMatchmakerCallback", {callback=on_realtime_matchmaker})
	end
end

function init(self)
	isGameCenterEnabled = false
	isGameCenterSignInUiEnabled = false
	localPlayerID = ""
	opponentPlayerID = ""
	-- change the following IDs to your IDs you setup for Game Center on App Store Connect
	self.default_leaderboardID = "com.animonger.defoldtestgamekit.default.leaderboard"
	self.second_leaderboardID = "com.animonger.defoldtestgamekit.second.leaderboard"
	self.first_leaderboardSetID = "com.animonger.defoldtestgamekit.first.leaderboardset"
	self.achievement_40pointsId = "com.animonger.defoldtestgamekit.achievement.40points"
	self.achievement_60pointsId = "com.animonger.defoldtestgamekit.achievement.60points"
	set_output_text_hash = hash("set_output_text")
end

-- function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
	-- print(">game_center< ------- function final called")
-- end

-- function update(self, dt)
-- 	-- Add update code here
-- 	-- Remove this function if not needed
-- end

function on_message(self, message_id, message, sender)
	print(">game_center< on_message message_id = " .. message_id)
	if message_id == hash("gc_signin") then
		if isGameCenterEnabled == false then
			-- call gc_signin() only once at the launch of your game to register your lua callback and call 
			-- game center local player authentication. if your game gets moved to the background, game center 
			-- will automagically reauthenticate the local player when the app moves from background to forground.
			gamekit.gc_signin(on_gc_signin)
		else
			output.text = output.text .. "ALERT, game center is enabled. call gc_signin() only once\n"
			msg.post("/menus#scroll_text", set_output_text_hash)
		end
	elseif message_id == hash("show_gc_signin_ui") then
		if isGameCenterSignInUiEnabled == true and isGameCenterEnabled == false then
			-- call gc_show_signin() only once, if local player cancels signin ui you will receive a 
			-- 'GKErrorCancelled = 2' error. if the local player cancels the singin ui 3 consecutive times 
			-- on 3 consecutive game launches, game center will stop showing the signin ui at game launch until
			-- the local player signs into game center through the device's game center settings.
			gamekit.gc_show_signin("UI")
		else
			output.text = output.text .. "ALERT, game center sign in UI is not enabled\n"
			msg.post("/menus#scroll_text", set_output_text_hash)
		end
	elseif isGameCenterEnabled == true then
		if message_id == hash("send_gc_score") then
			--print(">game_center< send_gc_score message.score = " .. tostring(message.score))
			-- context is an optional paramenter table key.
			--gamekit.gc_send("score", {leaderboardID=self.default_leaderboardID, value=message.score, context=42, callback=on_scores})
			gamekit.gc_send("score", {leaderboardID=self.second_leaderboardID, value=message.score, callback=on_scores})
		elseif message_id == hash("get_gc_scores") then
			--gamekit.gc_get("scores", {leaderboardID=self.default_leaderboardID, playerScope="Global", timeScope="AllTime", range={1,5}, callback=on_scores})
			gamekit.gc_get("scores", {leaderboardID=self.second_leaderboardID, playerScope="Global", timeScope="AllTime", range={1,6}, callback=on_scores})
		elseif message_id == hash("show_gc_lbs_ui") then
			--gamekit.gc_show("leaderboardsUI", {leaderboardID=self.default_leaderboardID, timeScope="AllTime"})
			gamekit.gc_show("leaderboardsUI", {leaderboardID=self.second_leaderboardID, timeScope="AllTime"})
		elseif message_id == hash("get_gc_leaderboards") then
			gamekit.gc_get("leaderboards", {callback=on_leaderboards})
		elseif message_id == hash("get_gc_default_lb_id") then
			gamekit.gc_get("defaultLeaderboardID", {callback=on_leaderboards})
		elseif message_id == hash("send_gc_default_lb_id") then
			gamekit.gc_send("setDefaultLeaderboardID", {leaderboardID=self.default_leaderboardID, callback=on_leaderboards})
			--gamekit.gc_send("setDefaultLeaderboardID", {leaderboardID=self.second_leaderboardID, callback=on_leaderboards})
		elseif message_id == hash("get_gc_lb_image") then
			gamekit.gc_get("leaderboardImage", {leaderboardID=self.default_leaderboardID, callback=on_leaderboards})
			--gamekit.gc_get("leaderboardImage", {leaderboardID=self.second_leaderboardID, callback=on_leaderboards})
		elseif message_id == hash("get_gc_lb_sets") then
			gamekit.gc_get("leaderboardSets", {callback=on_leaderboards})
		elseif message_id == hash("get_gc_lbs_in_lb_set") then
			gamekit.gc_get("leaderboardsInLeaderboardSet", {leaderboardSetID=self.first_leaderboardSetID, callback=on_leaderboards})
		elseif message_id == hash("get_gc_lb_set_image") then
			gamekit.gc_get("leaderboardSetImage", {leaderboardSetID=self.first_leaderboardSetID, callback=on_leaderboards})
		elseif message_id == hash("send_gc_achievement") then
			gamekit.gc_send("achievementProgress", {achievementID=self.achievement_40pointsId, percentComplete=message.percent, showsCompletionBanner=true, callback=on_achievements})
			--gamekit.gc_send("achievementProgress", {achievementID=self.achievement_60pointsId, percentComplete=message.percent, showsCompletionBanner=true, callback=on_achievements})
		elseif message_id == hash("show_gc_achvs_ui") then
			-- parameters table expected even though there are no parameters to send
			gamekit.gc_show("achievementsUI", {})
		elseif message_id == hash("get_gc_achvs_progress") then
			gamekit.gc_get("achievementsProgress", {callback=on_achievements})
		elseif message_id == hash("get_gc_achvs_description") then
			gamekit.gc_get("achievementsDescription", {callback=on_achievements})
		elseif message_id == hash("get_gc_achv_image") then
			gamekit.gc_get("achievementImage", {achievementID=self.achievement_40pointsId, callback=on_achievements})
		elseif message_id == hash("send_gc_reset_achvs") then
			gamekit.gc_send("resetAchievements", {callback=on_achievements})
		elseif message_id == hash("send_rt_data_all_players") then
			local dataB64 = base64.encode(message.data) -- base64 encode data to send to game center
			gamekit.gc_realtime("sendDataToAllPlayers", {data=dataB64, dataMode="Unreliable", isConfirmed=true})
		elseif message_id == hash("send_rt_data_to_players") then
			local dataB64 = base64.encode(message.data) -- base64 encode data to send to game center
			gamekit.gc_realtime("sendDataToPlayers", {data=dataB64, dataMode="Reliable", playerIDs={opponentPlayerID}, isConfirmed=true})
		elseif message_id == hash("register_rt_matchmaker_cb") then
			gamekit.gc_realtime("registerMatchmakerCallback", {callback=on_realtime_matchmaker})
		elseif message_id == hash("unregister_rt_matchmaker_cb") then
			-- parameters table expected even though there are no parameters to send
			gamekit.gc_realtime("unregisterMatchmakerCallback", {})
		elseif message_id == hash("show_gc_rt_match_ui") then
			-- playerGroup and playerAttributes are optional paramenter table keys.
			--gamekit.gc_realtime("showMatchUI", {minPlayers=2, maxPlayers=2, defaultNumPlayers=2, playerGroup=42, playerAttributes=0xFFFF0000})
			gamekit.gc_realtime("showMatchUI", {minPlayers=2, maxPlayers=2, defaultNumPlayers=2})
		elseif message_id == hash("show_gc_rt_match_invite_ui") then
			-- parameters table expected even though there are no parameters to send
			gamekit.gc_realtime("showMatchWithInviteUI", {})
		elseif message_id == hash("register_rt_match_cb") then
			gamekit.gc_realtime("registerMatchCallback", {callback=on_realtime_match})
		elseif message_id == hash("disconnect_rt_match") then
			-- parameters table expected even though there are no parameters to send
			gamekit.gc_realtime("disconnectMatch", {})
		elseif message_id == hash("send_gc_game_data") then
			print(">game_center< send_gc_game_data message.data = " .. message.data)
			local dataB64 = base64.encode(message.data)
			print(">game_center< send_gc_game_data dataB64 = " .. dataB64)
			gamekit.gc_send("saveGame", {gameData=dataB64, withName="FirstSavedGame", callback=on_save_game})
		end
	else
		output.text = output.text .. "ALERT, call gc_signin, game center is not enabled\n"
		msg.post("/menus#scroll_text", set_output_text_hash)
	end
end