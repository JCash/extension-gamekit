local output = require "main.OutputText"
local txt_scroll
local txt_hit
local is_txt_pressed
local txt_height
local stencil_height
local txt_position
local first_position_y
local offset_y
local last_y
local is_scrolling_up
local scroll_ease
local touch_hash
local set_output_text_hash
local btn_toggle_profile

function init(self)
	txt_scroll = gui.get_node("output_txt")
	txt_hit = gui.get_node("stencil")
	is_txt_pressed = false
	txt_height = gui.get_text_metrics_from_node(txt_scroll).height
	stencil_height = gui.get_size(txt_hit).y
	txt_position = gui.get_position(txt_scroll)
	first_position_y = gui.get_position(txt_scroll).y
	offset_y = 0
	last_y = 0
	is_scrolling_up = false
	scroll_ease = 0
	output.text = "Output messages:\n"
	gui.set_text(txt_scroll, output.text)
	touch_hash = hash("touch")
	set_output_text_hash = hash("set_output_text")
	btn_toggle_profile = gui.get_node("profile")
end

-- function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
-- end

function update(self, dt)
	if is_txt_pressed == true then
		txt_position.y = offset_y
		gui.set_position(txt_scroll, txt_position)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == set_output_text_hash then
		local str_length = string.len(output.text)
		if str_length < 4000 then
			gui.set_text(txt_scroll, output.text)
		else 
			local char_index = str_length - 3999
			output.text = string.sub(output.text, char_index) -- limit gui text output to display up to 4000 characters only
			gui.set_text(txt_scroll, output.text)
		end
		txt_height = gui.get_text_metrics_from_node(txt_scroll).height
		if txt_height > stencil_height then
			offset_y = txt_height - stencil_height
			txt_position.y = offset_y
			gui.animate(txt_scroll, gui.PROP_POSITION, txt_position, gui.EASING_LINEAR, 0.3)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == touch_hash and gui.pick_node(btn_toggle_profile, action.x, action.y) then
		if action.pressed then
			gui.set_scale(btn_toggle_profile, vmath.vector3(1.4, 1.4, 1))
		elseif action.released then
			gui.set_scale(btn_toggle_profile, vmath.vector3(1, 1, 1))
			msg.post("@system:", "toggle_profile")
		end
	end
	if txt_height > stencil_height then
		if action_id == touch_hash and gui.pick_node(txt_hit, action.x, action.y) then
			if action.pressed then
				is_txt_pressed = true
				last_y = action.y
				first_position_y = gui.get_position(txt_scroll).y
			end
		end
		if is_txt_pressed == true then
			offset_y = offset_y + (action.y - last_y)
			last_y = action.y
		end
		if action.released and is_txt_pressed == true then
			is_txt_pressed = false
			scroll_ease = math.abs(gui.get_position(txt_scroll).y - first_position_y) * 0.7
			if first_position_y < gui.get_position(txt_scroll).y then
				is_scrolling_up = true
			else
				is_scrolling_up = false
			end
			if offset_y > 0 and offset_y < (txt_height - stencil_height) then
				if is_scrolling_up == true then
					offset_y = offset_y + scroll_ease
				else
					offset_y = offset_y - scroll_ease
				end
				txt_position.y = offset_y
				gui.animate(txt_scroll, gui.PROP_POSITION, txt_position, go.EASING_OUTQUAD, 0.2)
			end
			if offset_y < 0 then
				offset_y = 0
				txt_position.y = offset_y
				gui.animate(txt_scroll, gui.PROP_POSITION, txt_position, gui.EASING_OUTBACK, 0.3)
			end
			if offset_y > (txt_height - stencil_height) then
				offset_y = txt_height - stencil_height
				txt_position.y = offset_y
				gui.animate(txt_scroll, gui.PROP_POSITION, txt_position, gui.EASING_OUTBACK, 0.3)
			end
		end
	end
end

-- function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
-- end
